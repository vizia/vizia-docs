searchState.loadedDescShard("vizia_core", 1, "The bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates GPU-backed <code>Image</code> from <code>backend_texture</code> associated …\nCreates GPU-backed <code>Image</code> from the provided GPU texture …\nCreates a GPU-backed <code>Image</code> from pixmap. It is uploaded to …\nRetrieves the existing backend texture. If <code>Image</code> is not a …\nReturns subset of this image as a texture-backed image.\nCreates a GPU-backed <code>Image</code> from compressed data. This …\nReturns <code>Image</code> backed by GPU texture associated with …\nCreates a GPU-backed <code>Image</code> from <code>YUVAPixmaps</code>. The image …\nCreates a GPU-backed <code>Image</code> from <code>YUV[A]</code> planar textures. …\nRetrieves the back-end render target. If <code>Surface</code> has no …\nRetrieves the back-end texture. If <code>Surface</code> has no back-end …\nReturns <code>Surface</code> on GPU indicated by context. Allocates …\nIf a surface is a Ganesh-backed surface, is being drawn …\nWraps a GPU-backed buffer into <code>Surface</code>. Caller must ensure …\nWraps a GPU-backed texture into <code>Surface</code>. Caller must …\nType that represents either a slice of <code>Color</code>, or a slice …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …\n<code>Image</code> describes a two dimensional array of pixels to draw. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>Image</code> using the encoded data, but attempts to …\nCreates <code>Image</code> from data returned by <code>image_generator</code>. The …\nCreates <code>Image</code> from picture. Returned <code>Image</code> width and …\nCreates a filtered <code>Image</code> on the CPU. filter processes the …\nCreates a CPU-backed <code>Image</code> from <code>bitmap</code>, sharing or copying …\nCreates a CPU-backed <code>Image</code> from compressed data.\nCreates CPU-backed <code>Image</code> from pixel data described by info.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is just a convenience type to allow passing <code>IRect</code>s, …\nCreate a filter that implements a custom blend mode. Each …\nThis filter takes an <code>crate::BlendMode</code> and uses it to …\nCreate a filter that blurs its input by the separate X and …\nCreate a filter that composes ‘inner’ with ‘outer’…\nCreate a filter that applies a crop to the result of the …\nCreate a filter that dilates each input pixel’s channel …\nCreate a filter that moves each pixel in its color input …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a filter that draws a drop shadow under the input …\nCreate a filter that renders a drop shadow, in exactly the …\nCreate a filter that always produces transparent black.\nCreate a filter that erodes each input pixel’s channel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a filter that draws the ‘src_rect’ portion of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a filter that fills ‘lens_bounds’ with a …\nCreate a filter that applies an NxM image processing …\nCreate a filter that transforms the input image by ‘…\nCreate a filter that merges the filters together by …\nCreate a filter that offsets the input filter by the given …\nCreate a filter that produces the <code>Picture</code> as its output, …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a filter that fills the output with the per-pixel …\nCreate a filter that calculates the diffuse illumination …\nCreate a filter that calculates the specular illumination …\nCreate a tile image filter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIterates through verb array, and associated <code>Point</code> array …\nThe maximum number of points an iterator will return for …\nReturns conic weight if <code>next()</code> returned <code>Verb::Conic</code>.\nInitializes <code>Iter</code> with an empty <code>Path</code>. <code>next()</code> on <code>Iter</code> returns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if last <code>Verb::Line</code> returned by <code>next()</code> was …\nReturns <code>true</code> if subsequent calls to <code>next()</code> return …\nSets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …\nReturns next <code>Verb</code> in verb array, and advances <code>Iter</code>. When …\nThe number of points an iterator will return for the verb.\nSets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the filled equivalent of the stroked path.\nOptional metadata to be passed into the PDF factory …\nThe name of the person who created the document.\nPDF streams may be compressed to save space. Use this to …\nThe date and time the document was created.\nIf the document was converted to PDF from another format, …\n1..31\n0..6, 0==Sunday\nEncoding quality controls the trade-off between size and …\nReturns the argument unchanged.\nReturns the argument unchanged.\n0..23\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeywords associated with the document. Commas may be used …\nThe natural language of the text in the PDF. If <code>lang</code> is …\n0..59\nThe date and time the document was most recently modified.\n1..12\nCreate a PDF-backed document.\nIf <code>true</code>, include XMP metadata, a document UUID, and <code>s_rgb</code> …\nThe product that is converting this document to PDF.\nThe DPI (pixels-per-inch) at which features without native …\n0..59\nThe subject of the document.\nThe number of minutes that this is ahead of or behind UTC.\nThe document’s title.\ne.g. 2005\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSpecify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an <code>Shader</code> that will sample the ‘image’. This is …\nCreate an <code>Shader</code> that will sample ‘image’ with minimal …\nCreate an <code>Shader</code> that will sample the ‘image’. This is …\nCreate an <code>Shader</code> that will sample ‘image’ with minimal …\nA trait for accessing the native run handler instance used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn Windows, and if the default feature “embed-icudtl” …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Surface</code> is responsible for managing the pixels that a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Surface</code> without backing pixels. Drawing to …\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nAllocates raster <code>Surface</code>. <code>crate::Canvas</code> returned by <code>Surface</code>…\nError when something goes wrong when loading an SVG file. …\nEnds the Canvas drawing and returns the resulting SVG. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new SVG canvas.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAlign the bottom edge of the placeholder with the baseline …\nMatch the baseline of the placeholder with the baseline.\nAlign the top edge of the placeholder with the baseline …\nAlign the bottom edge of the placeholder with the top edge …\nEfficient reference type to a C++ vector of font family …\nExtends the width of the last rect of each line to match …\nAlign the middle of the placeholder with the middle of the …\nWhere to vertically align the placeholder relative to the …\nMultiple decorations can be applied at once. Ex: Underline …\nProvide tight bounding boxes that fit heights per run.\nProvide tight bounding boxes that fit widths to the runs …\nAlign the top edge of the placeholder with the top edge of …\nGet a flags value with all known bits set.\nThe final computed ascent and descent for the line. This …\nThe y position of the baseline for this line from the top …\nDistance from the top edge of the rect to the baseline …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe index in the text buffer the line ends.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>FontMetrics</code> contains the following metrics:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns indices and references to style metrics in the …\nReturns the number of style metrics in the given index …\nTotal height of the paragraph including the current line.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe left edge of the line. The right edge can be obtained …\nZero indexed line number\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe index in the text buffer the line begins.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWidth of the line.\nThe glyph and grapheme cluster information associated with …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA trait that supports the conversion from a C/C++ value …\nThis trait supports the conversion of a wrapper into it’…\nA trait that supports the conversion from a C/C++ …\nA trait that supports the conversion from a C/C++ value …\nAccess the wrapped pointer.\nAccess the wrapped pointer.\nUnwraps the wrapper type into the native pointer.\nWraps a native pointer into a wrapper type. Returns <code>None</code> …\nUV subsampling is also specified in the enum value names …\nSpecifies the structure of planes for a YUV image with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes the PlaneConfig have alpha values?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of Y, U, V, A channels in the ith plane for a given …\nNumber of planes for a given PlaneConfig.\nGiven image dimensions, a planer configuration, …\n<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …\nRatio of Y/A values to U/V values in x and y.\nUV subsampling is also specified in the enum value names …\nGets the default ColorType to use with <code>num_channels</code> …\nIf the ColorType is supported for YUVA pixmaps this will …\nYUVAInfo combined with per-plane ColorTypes and row bytes. …\nHelper to store Pixmap planes as described by a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA handle to a view which has been built into the tree.\nA view is any object which can be displayed on the screen.\nSets whether the popup should include an arrow. Defaults …\nSets whether the tooltip should include an arrow. Defaults …\nSets the size of the popup arrow, or gap if the arrow is …\nAdds a badge to the Avatar.\nSet the color of the bar inside the ProgressBar.\nReturns the bounding box of the view.\nBuilds the view into the tree and returns a handle which …\nReturns a mutable reference to the context.\nWhich form element does this label describe.\nProvides custom drawing for the view.\nSpecifies a name for the view type which can be used as an …\nReturns the <code>Entity</code> id of the view.\nHandles any events received by the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the fraction of a slider that a press of an arrow key …\nStop the user from tabbing out of a subtree, which is …\nMody the internal data of the view.\nMarks the view as needing a redraw.\nMarks the view as needing a relayout.\nMarks the view as needing a restyle.\nRegisters a callback for when the user clicks off of the …\nSets the callback triggered when a textbox is blurred, …\nCallback which is run when the view is built/rebuilt.\nSets the callback triggered when a textbox edit is …\nSets the callback triggered when the slider value is …\nSets the callback triggered when a textbox is edited, i.e. …\nSets a callback which will be called when a scrollview is …\nSet the callback triggered when the radio button is …\nSets the callback triggered when a textbox is submitted, …\nSet the callback triggered when the Switch is pressed.\nSet the callback triggered when the checkbox is pressed.\nSets the placeholder text that appears when the textbox …\nSets the placement of a badge relative to its parent when …\nSets the position where the tooltip should appear relative …\nSets the position where the tooltip should appear relative …\nSets the range of the slider.\nReturns the scale factor of the device.\nSet to whether the popup should reposition to always be …\nSets a validation closure which is called when the textbox …\nSelects the style variant for the Avatar.\nMakes a knob that represents the current value with an arc\nAn avatar is used to visually represent a person or entity …\nEnum which represents the geometric variants of an avatar …\nEnum which represents the placement of a badge on its …\nTrigger the <code>on_blur</code> callback.\nA simple push button with a contained view.\nModifiers for changing the appearance of buttons.\nUsed in conjunction with the <code>variant</code> modifier for …\nA checkbox used to display and toggle a boolean state.\nSets the Size for the inner VStack which holds the content\nA visual indicator such as a tag.\nReset the text of the textbox to the bound data.\nCopy the textbox buffer to the clipboard.\nCut the textbox text and place it in the clipboard.\nA control used to select a date.\nDelete a section of text, determined by the <code>Movement</code>.\nSpecify the ‘drag’ position of the mouse cursor.\nA dropdown is used to display some state with the ability …\nA basic element with no interactivity.\nToggle the textbox to <em>not</em> allow text input.\nA view which arranges its children into a horizontal stack …\nSpecify the ‘hit’ position of the mouse cursor.\nInsert a string of text into the textbox.\nA label used to display text.\nA view for creating a list of items from a binding to a …\nMove the cursor and selection.\nThe orientation of a widget, such as a slider or scrollbar\nPaste the clipboard buffer into the textbox.\nDescribes the placement of a popup relative to its parent …\nA simple ProgressBar that can be used to show progress of …\nA radio button used to display and toggle boolean state.\nSpecify the scroll offset of the textbox.\nAdds given progress to scroll position for the x axis and …\nAdds given progress to scroll position for the y axis and …\nSelect all text.\nSelect the paragraph at the current cursor position.\nSelect the word at the current cursor position.\nSet the placeholder text of the textbox.\nSets the progress of scroll position between 0 and 1 for …\nSets the progress of scroll position between 0 and 1 for …\nThe slider control can be used to select from a continuous …\nToggle the textbox to allow text input.\nTrigger the <code>on_submit</code> callback with the current text.\nA Switch used to display and toggle a boolean state.\nEvents for modifying a textbox.\nThe <code>Textbox</code> view provides an input control for editing a …\nMakes a round knob with a tick to show the current value\nAdds tickmarks to a knob to show the steps that a knob can …\nA tooltip view.\nA view which arranges its children into a vertical stack …\nA view which overlays its children on top of each other.\nDerived lenses for <code>Badge</code>.\nDerived lenses for <code>Chip</code>.\nDerived lenses for <code>ComboBox</code>.\nHeight of the outer <code>ScrollView</code> which wraps the inner …\nWidth of the outer <code>ScrollView</code> which wraps the inner …\nDraw text caret for the current view.\nCreates an empty badge.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a horizontal dividing line.\nCreates a new horizontal progress bar bound to the value …\nHeight of the inner VStack which holds the content …\nWidth of the inner VStack which holds the content …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerived lenses for <code>List</code>.\nDerived lenses for <code>MenuBar</code>.\nDerived lenses for <code>MenuButton</code>.\nCreates a new button with specified content.\nCreates a new button group.\nCreates a new checkbox.\nCreates a dividing line. Orientation is determined by …\nCreates a new dropdown.\nCreates a new element.\nCreates a new label.\nCreates a new progress bar bound to the value targeted by …\nCreates a new Switch.\nCreates a new badge.\nCreates a new Chip view.\nCreates a new slider bound to the value targeted by the …\nCreates a new single-line textbox.\nCreates a new Tooltip view with the given content.\nCreates a new List view with a binding to the given lens …\nCreates a new multi-line textbox.\nCallback called when the scrollview is scrolled.\nDerived lenses for <code>PopupData</code>.\nDerived lenses for <code>Popup</code>.\nProgress of scroll position between 0 and 1 for the x axis\nProgress of scroll position between 0 and 1 for the y axis\nDerived lenses for <code>Submenu</code>.\nSelects the style variant to be used by the button or …\nCreates a vertical dividing line.\nCreates a new vertical progress bar bound to the value …\nDerived lenses for <code>VirtualList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>placement</code> on <code>Badge</code>. Use …\nLens for the field <code>placement</code> on <code>Badge</code>.\nLens for the whole <code>Badge</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>on_close</code> on <code>Chip</code>. Use …\nLens for the field <code>on_close</code> on <code>Chip</code>.\nLens for the whole <code>Chip</code> struct.\nLens for the field <code>filter_text</code> on <code>ComboBox</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLens for the field <code>hovered</code> on <code>ComboBox</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>ComboBox</code>.\nLens for the field <code>list_lens</code> on <code>ComboBox</code>.\nCreates a new lens for the field <code>filter_text</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>placeholder</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>on_select</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>list_lens</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>selected</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>is_open</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>hovered</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>p</code> on <code>ComboBox</code>. Use …\nLens for the field <code>on_select</code> on <code>ComboBox</code>.\nLens for the field <code>p</code> on <code>ComboBox</code>.\nLens for the field <code>placeholder</code> on <code>ComboBox</code>.\nLens for the whole <code>ComboBox</code> struct.\nLens for the field <code>selected</code> on <code>ComboBox</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>list_len</code> on <code>List</code>.\nCreates a new lens for the field <code>list_len</code> on <code>List</code>. Use …\nLens for the whole <code>List</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>MenuBar</code>.\nCreates a new lens for the field <code>is_open</code> on <code>MenuBar</code>. Use …\nLens for the whole <code>MenuBar</code> struct.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLens for the whole <code>MenuButton</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>PopupData</code>.\nCreates a new lens for the field <code>is_open</code> on <code>PopupData</code>. Use …\nLens for the whole <code>PopupData</code> struct.\nLens for the field <code>arrow_size</code> on <code>Popup</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>placement</code> on <code>Popup</code>. Use …\nCreates a new lens for the field <code>show_arrow</code> on <code>Popup</code>. Use …\nCreates a new lens for the field <code>arrow_size</code> on <code>Popup</code>. Use …\nCreates a new lens for the field <code>should_reposition</code> on <code>Popup</code>…\nLens for the field <code>placement</code> on <code>Popup</code>.\nLens for the whole <code>Popup</code> struct.\nLens for the field <code>should_reposition</code> on <code>Popup</code>.\nLens for the field <code>show_arrow</code> on <code>Popup</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>Submenu</code>.\nLens for the field <code>is_submenu</code> on <code>Submenu</code>.\nCreates a new lens for the field <code>is_open</code> on <code>Submenu</code>. Use …\nCreates a new lens for the field <code>open_on_hover</code> on <code>Submenu</code>. …\nCreates a new lens for the field <code>is_submenu</code> on <code>Submenu</code>. …\nLens for the field <code>open_on_hover</code> on <code>Submenu</code>.\nLens for the whole <code>Submenu</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>scroll_to_cursor</code> on …\nCreates a new lens for the field <code>on_change</code> on <code>VirtualList</code>. …\nLens for the field <code>on_change</code> on <code>VirtualList</code>.\nLens for the whole <code>VirtualList</code> struct.\nLens for the field <code>scroll_to_cursor</code> on <code>VirtualList</code>.\nEmitted when a character is typed.\nPrints the debug message to the console.\nEmitted when a file is dragged and then dropped onto the …\nMove keyboard focus to the next navigable view.\nMove keyboard focus to the previous navigable view.\nEmitted when an entity changes position or size.\nGrabs the mouse cursor, preventing it from leaving the …\nEmitted when a keyboard key is pressed.\nEmitted when a keyboard key is released.\nEmitted when mouse events have been captured.\nEmitted when mouse events have been released.\nEmitted when a mouse button is double clicked.\nEmitted when a mouse button is pressed\nEmitted when the mouse cursor enters an entity.\nEmitted when the mouse cursor leaves an entity.\nEmitted when the mouse cursor is moved\nEmitted when the mouse cursor leaves the bounding box of …\nEmitted when the mouse cursor enters the bounding box of …\nEmitted when the mouse scroll wheel is scrolled.\nEmitted when a mouse button is triple clicked\nEmitted when a mouse button is released.\nEmitted when the primary mouse button or trigger key is …\nEmitted when the primary mouse button or trigger key is …\nRequests a redraw of the window contents.\nRequests a relayout.\nReloads all application stylesheets.\nRequest a restyle.\nSets whether the window remains on top of other windows.\nSets the mouse cursor icon.\nSets the (x,y) position of the mouse cursor in window …\nSets whether the window has decorations.\nSets the maximum size of the window.\nSets whether the window is maximized.\nSets the minimum size of the window.\nSets whether the window is minimized.\nSets the position of the window.\nSets whether the window is resizable.\nSets the size of the window.\nSets the title of the window.\nSets whether the window is visible.\nEmited when the system window theme has changed.\nEmitted when a window is closed. Can also be emitted by a …\nEvents generated by the application in response to OS …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")