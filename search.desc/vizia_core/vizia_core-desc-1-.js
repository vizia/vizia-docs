searchState.loadedDescShard("vizia_core", 1, "Make a mutable reference to the entire image\nBorrow the container\nMake mutable reference immutable\nMake a reference to this image to pass it to functions …\nImmutable reference to the pixel storage. Warning: exposes …\nStorage for the pixels. Usually <code>Vec&lt;Pixel&gt;</code> or <code>&amp;[Pixel]</code>. …\nStorage for the pixels. Usually <code>Vec&lt;Pixel&gt;</code> or <code>&amp;[Pixel]</code>. …\nStorage for the pixels. Usually <code>Vec&lt;Pixel&gt;</code> or <code>&amp;[Pixel]</code>. …\nStorage for the pixels. Usually <code>Vec&lt;Pixel&gt;</code> or <code>&amp;[Pixel]</code>. …\nMutable reference to the pixel storage. Warning: exposes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of the image in pixels.\nHeight of the image in pixels.\nHeight of the image in pixels.\nHeight of the image in pixels.\nHeight of the image in pixels.\nHeight in number of full strides. If the underlying buffer …\nTake n-th row as a slice. Same as .rows().nth(n).unwrap()\nTake n-th row as a slice. Same as .rows().nth(n).unwrap()\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nRead a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)\nTake n-th row as a slice. Same as .rows().nth(n).unwrap()\nTake n-th row as a mutable slice. Same as …\nTake n-th row as a mutable slice. Same as …\nWrite a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)\nWrite a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)\nWrite a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)\nWrite a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the pixel storage by consuming the image. Be careful …\nReturns the buffer, width, height. Guarantees that the …\nDeprecated. Use .rows() or .pixels() iterators which are …\nConvert underlying buffer to owned (e.g. slice to vec)\nA convenience method for creating an image of the same …\nCreate new image with <code>Container</code> (which can be <code>Vec</code>, <code>&amp;[]</code> or …\nA convenience method for creating an image of the same …\nSame as <code>new()</code>, except each row is located <code>stride</code> number of …\nIterate <code>width*height</code> pixels in the <code>Img</code>, ignoring padding …\nPanics\nIf you want to iterate in parallel, parallelize <code>rows()</code> …\nIf you want to iterate in parallel, parallelize <code>rows()</code> …\nIf you want to iterate in parallel, parallelize <code>rows()</code> …\nIterate <code>width*height</code> pixels in the <code>Img</code>, by reference, …\nIterate over whole rows of pixels as slices\nIterate over whole rows as slices\nIterate over rows of the image as slices\nIterate over whole rows as slices\nIterate over rows of the image as mutable slices\nIterate over the entire buffer as rows, including all …\nIterate over the entire buffer as rows, including all …\nIterate over the entire buffer as rows, including all …\nIterate over the entire buffer as rows, including all …\nNumber of <em>pixels</em> to skip in the container to advance to …\nNumber of pixels to skip in the container to advance to …\nNumber of pixels to skip in the container to advance to …\nNumber of pixels to skip in the container to advance to …\nNumber of pixels to skip in the container to advance to …\nMake a reference for a part of the image, without copying …\nMake a reference for a part of the image, without copying …\nTurn this into immutable reference, and slice a subregion …\nCreate a mutable view into a region within the image. See …\nTrim this image without copying. Note that mutable borrows …\nReturns a reference to the buffer, width, height. …\nConvert underlying buffer to owned (e.g. slice to vec)\nWidth of the image in pixels.\nWidth of the image in pixels.\nWidth of the image in pixels.\nWidth of the image in pixels.\nWidth of the image in pixels.\nMaximum possible width of the data, including the stride.\nThis is the main renderer trait that the Canvas draws to.\nVertex struct for specifying triangle geometry\nVoid renderer used for testing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake the “Screen” RenderTarget actually render to a …\nCasts a slice of bytes into a slice of pixels, e.g. <code>[u8]</code> …\nSame as <code>ComponentMap</code>, but doesn’t change the alpha …\nCasting a slice of <code>RGB/A</code> values to a slice of <code>u8</code>\nApplying operation to every component\nCasting the struct to slices of its components\nCast a slice of component values (bytes) as a slice of …\nMarker trait for “plain old data”.\nDerive the <code>Pod</code> trait for a struct\nAn <code>Red + Green + Blue</code> pixel.\n16-bit RGB in machine’s native endian\n8-bit RGB\nAn <code>Red + Green + Blue + Alpha</code> pixel.\n16-bit RGB in machine’s native endian. 0 = transparent, …\n8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.\nTrait for types that can be safely created with <code>zeroed</code>.\nDerive the <code>Zeroable</code> trait for a struct\nAlpha Component\nAlpha Component\nAlpha Component\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nBGR/BGRA alernative layouts &amp; grayscale\nReinterpert slice as reverse-order BGR pixels\nReinterpert ntable slice as reverse-order BGR pixels\nReinterpert slice as reverse-order BGRA pixels\nReinterpert mutable slice as reverse-order alpha-last BGRA …\nThe components interpreted as raw bytes, in machine’s …\nThe components interpreted as raw bytes, in machine’s …\nReinterpert mutable slice as grayscale pixels\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels with alpha\nReinterpert mutable slice as grayscale pixels\nThe components interpreted as a mutable array, e.g. one <code>RGB</code>…\nReinterpret the slice as a read-only/shared slice of …\nReinterpret the slice as a mutable/exclusive slice of …\nReinterpert slice as RGB pixels\nReinterpert mutable slice as RGB pixels\nReinterpert slice as RGBA pixels\nReinterpert mutable slice as RGBA pixels\nThe components interpreted as an array, e.g. one <code>RGB</code> …\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nCopy RGB components out of the RGBA struct\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes exactly 3 elements from the iterator and creates a …\nTakes exactly 4 elements from the iterator and creates a …\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nConvenience function (equivalent of …\nCreate a new RGBA with a new alpha value created by the …\nConvenience function for applying the same formula to …\nCreate new RGBA with the same alpha value, but different …\nConvenience function for creating a new pixel The order of …\nConvenience function for creating a new pixel The order of …\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel The order of …\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nCalls <code>zeroed</code>.\nA <code>Blue + Green + Red</code> pixel.\n16-bit BGR in machine’s native endian\n8-bit BGR\nA <code>Blue + Green + Red + Alpha</code> pixel.\n16-bit BGR in machine’s native endian\n8-bit BGRA\n16-bit gray in machine’s native endian\n8-bit gray\n16-bit gray with alpha in machine’s native endian\n8-bit gray with alpha in machine’s native endian\nA <code>Grayscale</code> pixel.\nA pixel for grayscale value + alpha components.\nAlpha Component\nAlpha Component\nAlpha Component\nConvenience function for converting to RGBA\nCreate a new RGBA with the new alpha value, but same RGB …\nCreate a new <code>GrayAlpha</code> with the new alpha value, but same …\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nBlue Component\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nGreen Component\nCopy <code>Gray</code> component out of the <code>GrayAlpha</code> struct\nProvide a mutable view of only <code>Gray</code> component (leaving out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over color components (R, G, and B)\nIterate over all components (length=4)\nCreate a new RGBA with a new alpha value created by the …\nCreate a new <code>GrayAlpha</code> with a new alpha value created by …\nCreate new <code>GrayAlpha</code> with the same alpha value, but …\nCreate new RGBA with the same alpha value, but different …\nConvenience function for creating a new pixel Warning: The …\nConvenience function for creating a new pixel Warning: The …\nNew grayscale pixel\nNew grayscale+alpha pixel\nConvenience function for converting to RGBA with alpha …\nConvenience function for creating a new pixel Warning: The …\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nRed Component\nCopy RGB components out of the RGBA struct\nProvide a mutable view of only RGB components (leaving out …\nThe canvas which all views draw to.\nA handle to a view which has been already built into the …\nA view is any object which can be displayed on the screen.\nSets whether the tooltip should include an arrow. Defaults …\nSets whether the tooltip should include an arrow. Defaults …\nSets the size of the tooltip arrow, or gap if the arrow is …\nAdds a badge to the Avatar.\nSet the color of the bar inside the ProgressBar.\nReturns the bounding box of the view.\nBuilds the view into the tree and returns a handle which …\nReturns a mutable reference to the context.\nWhich form element does this label describe.\nProvides custom drawing for the view.\nSpecifies a name for the view type which can be used as an …\nReturns the <code>Entity</code> id of the view.\nHandles any events received by the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the fraction of a slider that a press of an arrow key …\nStop the user from tabbing out of a subtree, which is …\nMody the internal data of the view.\nMarks the view as needing a redraw.\nMarks the view as needing a relayout.\nMarks the view as needing a restyle.\nRegisters a callback for when the user clicks off of the …\nRegisters a callback for when the user clicks off of the …\nSets the callback triggered when a textbox is blurred, …\nCallback which is run when the view is built/rebuilt.\nSets the callback triggered when a textbox edit is …\nSets the callback triggered when the slider value is …\nSets the callback triggered when a textbox is edited, i.e. …\nSets a callback which will be called when a scrollview is …\nSet the callback triggered when the radio button is …\nSets the callback triggered when a textbox is submitted, …\nSet the callback triggered when the checkbox is pressed.\nSet the callback triggered when the Switch is pressed.\nSets the placeholder text that appears when the textbox …\nSets the position where the tooltip should appear relative …\nSets the position where the tooltip should appear relative …\nSets the placement of a badge relative to its parent when …\nSets the range of the slider.\nReturns the scale factor of the device.\nSets a validation closure which is called when the textbox …\nSelects the style variant for the Avatar.\nMakes a knob that represents the current value with an arc\nAn avatar is used to visually represent a person or entity …\nEnum which represents the geometric variants of an avatar …\nEnum which represents the placement of a badge on its …\nTrigger the <code>on_blur</code> callback.\nA simple push button with a contained view.\nModifiers for changing the appearance of buttons.\nUsed in conjunction with the <code>variant</code> modifier for …\nA checkbox used to display and toggle a boolean state.\nSets the Size for the inner VStack which holds the content\nA visual indicator such as a tag.\nReset the text of the textbox to the bound data.\nCopy the textbox buffer to the clipboard.\nCut the textbox text and place it in the clipboard.\nA control used to select a date.\nDelete a section of text, determined by the <code>Movement</code>.\nSpecify the ‘drag’ position of the mouse cursor.\nA dropdown is used to display some state with the ability …\nA basic element with no interactivity.\nToggle the textbox to <em>not</em> allow text input.\nA view which arranges its children into a horizontal stack …\nSpecify the ‘hit’ position of the mouse cursor.\nInsert a string of text into the textbox.\nA label used to display text.\nA view for creating a list of items from a binding to a …\nMove the cursor and selection.\nThe orientation of a widget, such as a slider or scrollbar\nPaste the clipboard buffer into the textbox.\nDescribes the placement of a popup relative to its parent …\nA simple ProgressBar that can be used to show progress of …\nA radio button used to display and toggle boolean state.\nSpecify the scroll offset of the textbox.\nAdds given progress to scroll position for the x axis and …\nAdds given progress to scroll position for the y axis and …\nSelect all text.\nSelect the paragraph at the current cursor position.\nSelect the word at the current cursor position.\nSet the placeholder text of the textbox.\nSets the progress of scroll position between 0 and 1 for …\nSets the progress of scroll position between 0 and 1 for …\nThe slider control can be used to select from a continuous …\nToggle the textbox to allow text input.\nTrigger the <code>on_submit</code> callback with the current text.\nA Switch used to display and toggle a boolean state.\nEvents for modifying a textbox.\nThe <code>Textbox</code> view provides an input control for editing a …\nMakes a round knob with a tick to show the current value\nAdds tickmarks to a knob to show the steps that a knob can …\nA tooltip view.\nA view which arranges its children into a vertical stack …\nA view which overlays its children on top of each other.\nDerived lenses for <code>Badge</code>.\nDerived lenses for <code>Chip</code>.\nDerived lenses for <code>ComboBox</code>.\nHeight of the outer <code>ScrollView</code> which wraps the inner …\nWidth of the outer <code>ScrollView</code> which wraps the inner …\nCreates an empty badge.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a horizontal dividing line.\nCreates a new horizontal progress bar bound to the value …\nHeight of the inner VStack which holds the content …\nWidth of the inner VStack which holds the content …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerived lenses for <code>List</code>.\nDerived lenses for <code>MenuBar</code>.\nDerived lenses for <code>MenuButton</code>.\nCreates a new button with specified content.\nCreates a new <code>IconButton</code> with the specified icon code.\nCreates a new button group.\nCreates a new checkbox.\nCreates a dividing line. Orientation is determined by …\nCreates a new dropdown.\nCreates a new element.\nCreates a new label.\nCreates a new label.\nCreates a new progress bar bound to the value targeted by …\nCreates a new Switch.\nCreates a new badge.\nCreates a new Chip view.\nCreates a new slider bound to the value targeted by the …\nCreates a new single-line textbox.\nCreates a new Tooltip view with the given content.\nCreates a new List view with a binding to the given lens …\nCreates a new multi-line textbox.\nCallback called when the scrollview is scrolled.\nDerived lenses for <code>PopupData</code>.\nDerived lenses for <code>Popup</code>.\nProgress of scroll position between 0 and 1 for the x axis\nProgress of scroll position between 0 and 1 for the y axis\nDerived lenses for <code>Submenu</code>.\nSelects the style variant to be used by the button or …\nCreates a vertical dividing line.\nCreates a new vertical progress bar bound to the value …\nDerived lenses for <code>VirtualList</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>placement</code> on <code>Badge</code>. Use …\nLens for the field <code>placement</code> on <code>Badge</code>.\nLens for the whole <code>Badge</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>on_close</code> on <code>Chip</code>. Use …\nLens for the field <code>on_close</code> on <code>Chip</code>.\nLens for the whole <code>Chip</code> struct.\nLens for the field <code>filter_text</code> on <code>ComboBox</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLens for the field <code>hovered</code> on <code>ComboBox</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>ComboBox</code>.\nLens for the field <code>list_lens</code> on <code>ComboBox</code>.\nCreates a new lens for the field <code>filter_text</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>placeholder</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>on_select</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>list_lens</code> on <code>ComboBox</code>. …\nCreates a new lens for the field <code>selected</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>is_open</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>hovered</code> on <code>ComboBox</code>. Use …\nCreates a new lens for the field <code>p</code> on <code>ComboBox</code>. Use …\nLens for the field <code>on_select</code> on <code>ComboBox</code>.\nLens for the field <code>p</code> on <code>ComboBox</code>.\nLens for the field <code>placeholder</code> on <code>ComboBox</code>.\nLens for the whole <code>ComboBox</code> struct.\nLens for the field <code>selected</code> on <code>ComboBox</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>list_len</code> on <code>List</code>.\nCreates a new lens for the field <code>list_len</code> on <code>List</code>. Use …\nLens for the whole <code>List</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>MenuBar</code>.\nCreates a new lens for the field <code>is_open</code> on <code>MenuBar</code>. Use …\nLens for the whole <code>MenuBar</code> struct.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLens for the whole <code>MenuButton</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>PopupData</code>.\nCreates a new lens for the field <code>is_open</code> on <code>PopupData</code>. Use …\nLens for the whole <code>PopupData</code> struct.\nLens for the field <code>arrow_size</code> on <code>Popup</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new lens for the field <code>placement</code> on <code>Popup</code>. Use …\nCreates a new lens for the field <code>show_arrow</code> on <code>Popup</code>. Use …\nCreates a new lens for the field <code>arrow_size</code> on <code>Popup</code>. Use …\nLens for the field <code>placement</code> on <code>Popup</code>.\nLens for the whole <code>Popup</code> struct.\nLens for the field <code>show_arrow</code> on <code>Popup</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>is_open</code> on <code>Submenu</code>.\nLens for the field <code>is_submenu</code> on <code>Submenu</code>.\nCreates a new lens for the field <code>is_open</code> on <code>Submenu</code>. Use …\nCreates a new lens for the field <code>open_on_hover</code> on <code>Submenu</code>. …\nCreates a new lens for the field <code>is_submenu</code> on <code>Submenu</code>. …\nLens for the field <code>open_on_hover</code> on <code>Submenu</code>.\nLens for the whole <code>Submenu</code> struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>item_height</code> on <code>VirtualList</code>.\nCreates a new lens for the field <code>num_items</code> on <code>VirtualList</code>. …\nCreates a new lens for the field <code>item_height</code> on <code>VirtualList</code>…\nCreates a new lens for the field <code>visible_range</code> on …\nCreates a new lens for the field <code>scroll_y</code> on <code>VirtualList</code>. …\nCreates a new lens for the field <code>scroll_to_cursor</code> on …\nCreates a new lens for the field <code>on_change</code> on <code>VirtualList</code>. …\nLens for the field <code>num_items</code> on <code>VirtualList</code>.\nLens for the field <code>on_change</code> on <code>VirtualList</code>.\nLens for the whole <code>VirtualList</code> struct.\nLens for the field <code>scroll_to_cursor</code> on <code>VirtualList</code>.\nLens for the field <code>scroll_y</code> on <code>VirtualList</code>.\nLens for the field <code>visible_range</code> on <code>VirtualList</code>.\nEmitted when a character is typed.\nPrints the debug message to the console.\nEmitted when a file is dragged and then dropped onto the …\nMove keyboard focus to the next navigable view.\nMove keyboard focus to the previous navigable view.\nEmitted when an entity changes position or size.\nGrabs the mouse cursor, preventing it from leaving the …\nEmitted when a keyboard key is pressed.\nEmitted when a keyboard key is released.\nEmitted when mouse events have been captured.\nEmitted when mouse events have been released.\nEmitted when a mouse button is double clicked.\nEmitted when a mouse button is pressed\nEmitted when the mouse cursor enters an entity.\nEmitted when the mouse cursor leaves an entity.\nEmitted when the mouse cursor is moved\nEmitted when the mouse cursor leaves the bounding box of …\nEmitted when the mouse cursor enters the bounding box of …\nEmitted when the mouse scroll wheel is scrolled.\nEmitted when a mouse button is triple clicked\nEmitted when a mouse button is released.\nEmitted when the primary mouse button or trigger key is …\nEmitted when the primary mouse button or trigger key is …\nRequests a redraw of the window contents.\nRequests a relayout.\nReloads all application stylesheets.\nRequest a restyle.\nSets whether the window remains on top of other windows.\nSets the mouse cursor icon.\nSets the (x,y) position of the mouse cursor in window …\nSets whether the window has decorations.\nSets the maximum size of the window.\nSets whether the window is maximized.\nSets the minimum size of the window.\nSets whether the window is minimized.\nSets the position of the window.\nSets whether the window is resizable.\nSets the size of the window.\nSets the title of the window.\nSets whether the window is visible.\nEmited when the system window theme has changed.\nEmitted when a window is closed. Can also be emitted by a …\nEvents generated by the application in response to OS …\nModifiers for setting the properties of a window.\nSets whether the window should be on top of other windows. …\nSets whether the window has decorations. Accepts a boolean …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the icon used for the window.\nSets the inner size of the window to the given value. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum inner size of the window to the given …\nSets whether the window is maximized. Accepts a boolean …\nSets the minimum inner size of the window to the given …\nSets whether the window is minimized. Accepts a boolean …\nSets the position of the window to the given value. …\nSets whether the window can be resized. Accepts a boolean …\nSets the title of the window to the given value. Accepts a …\nSets whether the window is transparent. Accepts a boolean …\nSets whether the window is visible. Accepts a boolean …\nSets whether the window has vsync enabled.")