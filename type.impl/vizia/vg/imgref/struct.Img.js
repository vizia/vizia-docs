(function() {var type_impls = {
"vizia":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.width\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.width\" class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Width of the image in pixels.</p>\n<p>Note that this isn’t same as the width of the row in image data, see <code>stride()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.height\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.height\" class=\"fn\">height</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Height of the image in pixels.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stride\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.stride\" class=\"fn\">stride</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Number of <em>pixels</em> to skip in the container to advance to the next row.</p>\n<p>Note the last row may have fewer pixels than the stride.\nSome APIs use number of <em>bytes</em> for a stride. You may need to multiply this one by number of pixels.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.buf\" class=\"fn\">buf</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Container</a></h4></section></summary><div class=\"docblock\"><p>Immutable reference to the pixel storage. Warning: exposes stride. Use <code>pixels()</code> or <code>rows()</code> instead.</p>\n<p>See also <code>into_contiguous_buf()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.buf_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.buf_mut\" class=\"fn\">buf_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut Container</a></h4></section></summary><div class=\"docblock\"><p>Mutable reference to the pixel storage. Warning: exposes stride. Use <code>pixels_mut()</code> or <code>rows_mut()</code> instead.</p>\n<p>See also <code>into_contiguous_buf()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.into_buf\" class=\"fn\">into_buf</a>(self) -&gt; Container</h4></section></summary><div class=\"docblock\"><p>Get the pixel storage by consuming the image. Be careful about stride — see <code>into_contiguous_buf()</code> for a safe version.</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.sub_image\" class=\"fn\">sub_image</a>(\n    &amp;self,\n    left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    top: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Make a reference for a part of the image, without copying any pixels.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>It will panic if sub_image is outside of the image area\n(left + width must be &lt;= container width, etc.)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.rows\" class=\"fn\">rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.RowsIter.html\" title=\"struct vizia::vg::imgref::RowsIter\">RowsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RowsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over whole rows of pixels as slices</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If stride is 0</p>\n<p>See also <code>pixels()</code></p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_contiguous_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.to_contiguous_buf\" class=\"fn\">to_contiguous_buf</a>(&amp;self) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the buffer, width, height. Guarantees that the buffer is contiguous,\ni.e. it’s <code>width*height</code> elements long, and <code>[x + y*width]</code> addresses each pixel.</p>\n<p>It will create a copy if the buffer isn’t contiguous (width != stride).\nFor a more efficient version, see <code>into_contiguous_buf()</code></p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.sub_image\" class=\"fn\">sub_image</a>(\n    &amp;'a mut self,\n    left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    top: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Turn this into immutable reference, and slice a subregion of it</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_image_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.sub_image_mut\" class=\"fn\">sub_image_mut</a>(\n    &amp;mut self,\n    left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    top: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Trim this image without copying.\nNote that mutable borrows are exclusive, so it’s not possible to have more than\none mutable subimage at a time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Make mutable reference immutable</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels\" class=\"fn\">pixels</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsIter.html\" title=\"struct vizia::vg::imgref::PixelsIter\">PixelsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate <code>width*height</code> pixels in the <code>Img</code>, ignoring padding area</p>\n<p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>if width is 0</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels_ref\" class=\"fn\">pixels_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsRefIter.html\" title=\"struct vizia::vg::imgref::PixelsRefIter\">PixelsRefIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsRefIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate <code>width*height</code> pixels in the <code>Img</code>, by reference, ignoring padding area</p>\n<p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>if width is 0</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels\" class=\"fn\">pixels</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsIter.html\" title=\"struct vizia::vg::imgref::PixelsIter\">PixelsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<p>if width is 0</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels_mut\" class=\"fn\">pixels_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsIterMut.html\" title=\"struct vizia::vg::imgref::PixelsIterMut\">PixelsIterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsIterMut&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>if width is 0</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels\" class=\"fn\">pixels</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsIter.html\" title=\"struct vizia::vg::imgref::PixelsIter\">PixelsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>if width is 0</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pixels_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.pixels_mut\" class=\"fn\">pixels_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.PixelsIterMut.html\" title=\"struct vizia::vg::imgref::PixelsIterMut\">PixelsIterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"PixelsIterMut&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>If you want to iterate in parallel, parallelize <code>rows()</code> instead.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>if width is 0</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.rows\" class=\"fn\">rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.RowsIter.html\" title=\"struct vizia::vg::imgref::RowsIter\">RowsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RowsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over whole rows as slices</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>if stride is 0</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.rows_mut\" class=\"fn\">rows_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.RowsIterMut.html\" title=\"struct vizia::vg::imgref::RowsIterMut\">RowsIterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RowsIterMut&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over whole rows as slices</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>if stride is 0</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_image_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.sub_image_mut\" class=\"fn\">sub_image_mut</a>(\n    &amp;mut self,\n    left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    top: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Create a mutable view into a region within the image. See <code>sub_image()</code> for read-only views.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_image\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.sub_image\" class=\"fn\">sub_image</a>(\n    &amp;self,\n    left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    top: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Make a reference for a part of the image, without copying any pixels.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Make a reference to this image to pass it to functions without giving up ownership</p>\n<p>The reference should be passed by value (<code>ImgRef</code>, not <code>&amp;ImgRef</code>).</p>\n<p>If you need a mutable reference, see <code>as_mut()</code> and <code>sub_image_mut()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Make a mutable reference to the entire image</p>\n<p>The reference should be passed by value (<code>ImgRefMut</code>, not <code>&amp;mut ImgRefMut</code>).</p>\n<p>See also <code>sub_image_mut()</code> and <code>rows_mut()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.rows\" class=\"fn\">rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.RowsIter.html\" title=\"struct vizia::vg::imgref::RowsIter\">RowsIter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RowsIter&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over rows of the image as slices</p>\n<p>Each slice is guaranteed to be exactly <code>width</code> pixels wide.</p>\n<p>This iterator is a good candidate for parallelization (e.g. rayon’s <code>par_bridge()</code>)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.rows_mut\" class=\"fn\">rows_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.RowsIterMut.html\" title=\"struct vizia::vg::imgref::RowsIterMut\">RowsIterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RowsIterMut&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterate over rows of the image as mutable slices</p>\n<p>Each slice is guaranteed to be exactly <code>width</code> pixels wide.</p>\n<p>This iterator is a good candidate for parallelization (e.g. rayon’s <code>par_bridge()</code>)</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_stride\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.new_stride\" class=\"fn\">new_stride</a>(\n    buf: Container,\n    width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>,\n    stride: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>new()</code>, except each row is located <code>stride</code> number of pixels after the previous one.</p>\n<p>Stride can be equal to <code>width</code> or larger. If it’s larger, then pixels between end of previous row and start of the next are considered a padding, and may be ignored.</p>\n<p>The <code>Container</code> is usually a <code>Vec</code> or a slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.new\" class=\"fn\">new</a>(buf: Container, width: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, height: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;</h4></section></summary><div class=\"docblock\"><p>Create new image with <code>Container</code> (which can be <code>Vec</code>, <code>&amp;[]</code> or something else) with given <code>width</code> and <code>height</code> in pixels.</p>\n<p>Assumes the pixels in container are contiguous, layed out row by row with <code>width</code> pixels per row and at least <code>height</code> rows.</p>\n<p>If the container is larger than <code>width</code>×<code>height</code> pixels, the extra rows are a considered a padding and may be ignored.</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_contiguous_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.into_contiguous_buf\" class=\"fn\">into_contiguous_buf</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the buffer, width, height. Guarantees that the buffer is contiguous,\ni.e. it’s <code>width*height</code> elements long, and <code>[x + y*width]</code> addresses each pixel.</p>\n<p>Efficiently performs operation in-place. For other containers use <code>pixels().collect()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_contiguous_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.as_contiguous_buf\" class=\"fn\">as_contiguous_buf</a>(&amp;mut self) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the buffer, width, height. Guarantees that the buffer is contiguous,\ni.e. it’s <code>width*height</code> elements long, and <code>[x + y*width]</code> addresses each pixel.</p>\n<p>Efficiently performs operation in-place. For other containers use <code>pixels().collect()</code>.</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3COldContainer%3E\" class=\"impl\"><a href=\"#impl-Img%3COldContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;OldContainer&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;OldContainer&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.map_buf\" class=\"fn\">map_buf</a>&lt;NewContainer, OldPixel, NewPixel, F&gt;(\n    self,\n    callback: F\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;NewContainer&gt;<div class=\"where\">where\n    NewContainer: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[NewPixel]</a>&gt;,\n    OldContainer: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[OldPixel]</a>&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(OldContainer) -&gt; NewContainer,</div></h4></section></summary><div class=\"docblock\"><p>A convenience method for creating an image of the same size and stride, but with a new buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.new_buf\" class=\"fn\">new_buf</a>&lt;NewContainer, OldPixel, NewPixel&gt;(\n    &amp;self,\n    new_buf: NewContainer\n) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;NewContainer&gt;<div class=\"where\">where\n    NewContainer: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[NewPixel]</a>&gt;,\n    OldContainer: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[OldPixel]</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>A convenience method for creating an image of the same size and stride, but with a new buffer.</p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Img%3CT%3E\" class=\"impl\"><a href=\"#impl-Img%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"vizia/vg/imgref/struct.Img.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/trait.ToOwned.html#associatedtype.Owned\" title=\"type alloc::borrow::ToOwned::Owned\">Owned</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Convert underlying buffer to owned (e.g. slice to vec)</p>\n<p>See also <code>to_contiguous_buf().0.into_owned()</code></p>\n</div></details></div></details>",0,"vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3CVec%3CU%3E%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3CVec%3CU%3E%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<Vec<U>>>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3CVec%3CU%3E%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3CVec%3CU%3E%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<Vec<U>>>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<&'b [U]>>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<&'a [U]>>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3C%26%5BU%5D%3E%3E-for-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<&'b [U]>>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3C%26mut+%5BU%5D%3E%3E-for-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3C%26mut+%5BU%5D%3E%3E-for-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<&'b mut [U]>>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CImg%3C%26mut+%5BU%5D%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CImg%3C%26mut+%5BU%5D%3E%3E-for-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'b mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[U]</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Img<&'b mut [U]>>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3Cusize%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Take n-th row as a slice. Same as .rows().nth(n).unwrap()</p>\n<p>Slice length is guaranteed to equal image width.\nRow must be within image height.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<usize>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(u32,+u32)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-Index%3C(u32,+u32)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(u32, u32)>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-Index%3Cusize%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Take n-th row as a slice. Same as .rows().nth(n).unwrap()</p>\n<p>Slice length is guaranteed to equal image width.\nRow must be within image height.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<usize>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(usize,+usize)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-Index%3C(usize,+usize)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(usize, usize)>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(usize,+usize)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3C(usize,+usize)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(usize, usize)>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(u32,+u32)%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3C(u32,+u32)%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(u32, u32)>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(usize,+usize)%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3C(usize,+usize)%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(usize, usize)>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3Cusize%3E-for-Img%3C%26%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Take n-th row as a slice. Same as .rows().nth(n).unwrap()</p>\n<p>Slice length is guaranteed to equal image width.\nRow must be within image height.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<usize>","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(u32,+u32)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-Index%3C(u32,+u32)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Read a pixel at <code>(x,y)</code> location (e.g. px = <code>img[(x,y)]</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = Pixel</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<(u32, u32)>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<section id=\"impl-Eq-for-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","vizia::vg::imgref::ImgVec"],["<section id=\"impl-Eq-for-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","vizia::vg::imgref::ImgRefMut"],["<section id=\"impl-Eq-for-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","vizia::vg::imgref::ImgRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ImgExtMut%3CPixel%3E-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-ImgExtMut%3CPixel%3E-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Pixel, Container&gt; <a class=\"trait\" href=\"vizia/vg/imgref/trait.ImgExtMut.html\" title=\"trait vizia::vg::imgref::ImgExtMut\">ImgExtMut</a>&lt;Pixel&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows_padded_mut\" class=\"method trait-impl\"><a href=\"#method.rows_padded_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExtMut.html#tymethod.rows_padded_mut\" class=\"fn\">rows_padded_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/core/slice/iter/struct.ChunksMut.html\" title=\"struct core::slice::iter::ChunksMut\">ChunksMut</a>&lt;'_, Pixel&gt;</h4></section></summary><div class=\"docblock\"><p>Iterate over the entire buffer as rows, including all padding</p>\n<p>Rows will have up to <code>stride</code> width, but the last row may be shorter.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>If stride is 0</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExtMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;</h4></section></summary><div class='docblock'>Borrow the container mutably</div></details></div></details>","ImgExtMut<Pixel>","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(u32,+u32)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3C(u32,+u32)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Write a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details></div></details>","IndexMut<(u32, u32)>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(usize,+usize)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3C(usize,+usize)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Write a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details></div></details>","IndexMut<(usize, usize)>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(usize,+usize)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3C(usize,+usize)%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Write a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details></div></details>","IndexMut<(usize, usize)>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3Cusize%3E-for-Img%3C%26mut+%5BPixel%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Take n-th row as a mutable slice. Same as .rows().nth(n).unwrap()</p>\n<p>Slice length is guaranteed to equal image width.\nRow must be within image height.</p>\n</div></details></div></details>","IndexMut<usize>","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(u32,+u32)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3C(u32,+u32)%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.u32.html\">u32</a>)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Write a pixel at <code>(x,y)</code> location (e.g. <code>img[(x,y)] = px</code>)</p>\n<p>Coordinates may be outside <code>width</code>/<code>height</code> if the buffer has enough padding.\nThe x coordinate can’t exceed <code>stride</code>.</p>\n</div></details></div></details>","IndexMut<(u32, u32)>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3Cusize%3E-for-Img%3CVec%3CPixel%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Pixel&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt;<div class=\"where\">where\n    Pixel: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    row: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Pixel&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Take n-th row as a mutable slice. Same as .rows().nth(n).unwrap()</p>\n<p>Slice length is guaranteed to equal image width.\nRow must be within image height.</p>\n</div></details></div></details>","IndexMut<usize>","vizia::vg::imgref::ImgVec"],["<section id=\"impl-Copy-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-Copy-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ImgExt%3CPixel%3E-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-ImgExt%3CPixel%3E-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Pixel, Container&gt; <a class=\"trait\" href=\"vizia/vg/imgref/trait.ImgExt.html\" title=\"trait vizia::vg::imgref::ImgExt\">ImgExt</a>&lt;Pixel&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows_padded\" class=\"method trait-impl\"><a href=\"#method.rows_padded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.rows_padded\" class=\"fn\">rows_padded</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/core/slice/iter/struct.Chunks.html\" title=\"struct core::slice::iter::Chunks\">Chunks</a>&lt;'_, Pixel&gt;</h4></section></summary><div class=\"docblock\"><p>Iterate over the entire buffer as rows, including all padding</p>\n<p>Rows will have up to <code>stride</code> width, but the last row may be shorter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.width_padded\" class=\"method trait-impl\"><a href=\"#method.width_padded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.width_padded\" class=\"fn\">width_padded</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Maximum possible width of the data, including the stride. <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.width_padded\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.height_padded\" class=\"method trait-impl\"><a href=\"#method.height_padded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.height_padded\" class=\"fn\">height_padded</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Height in number of full strides.\nIf the underlying buffer is not an even multiple of strides, the last row is ignored. <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.height_padded\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"vizia/vg/imgref/trait.ImgExt.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Pixel]</a>&gt;</h4></section></summary><div class='docblock'>Borrow the container</div></details></div></details>","ImgExt<Pixel>","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Deprecated. Use .rows() or .pixels() iterators which are more predictable</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;Container as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Deprecated. Use .rows() or .pixels() iterators which are more predictable</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;Container as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = &lt;Container as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.2/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Img%3CContainer%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Img%3CContainer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Container&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;Container&gt;<div class=\"where\">where\n    Container: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.2/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.77.2/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vizia::vg::imgref::ImgVec","vizia::vg::imgref::ImgRef","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CImg%3CCow%3C'_,+%5BT%5D%3E%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-From%3CImg%3CCow%3C'_,+%5BT%5D%3E%3E%3E-for-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;&gt;&gt; for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(img: <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.2/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;&gt;) -&gt; <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Img<Cow<'_, [T]>>>","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Img%3CVec%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Img%3CVec%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.2/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","vizia::vg::imgref::ImgVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Img%3C%26mut+%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Img%3C%26mut+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","vizia::vg::imgref::ImgRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Img%3C%26%5BT%5D%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Img%3C%26%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"vizia/vg/imgref/struct.Img.html\" title=\"struct vizia::vg::imgref::Img\">Img</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.2/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.2/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","vizia::vg::imgref::ImgRef"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()