initSidebarItems({"enum":[["BorderCornerShape","The shape the default view drawing algorithm should use for handling borders with a given radius."],["CustomParseError",""],["Display","Display determines whether an entity will be rendered and acted on by the layout system. To make an entity invisible to rendering but still visible to layout, see [Visibility]."],["GradientDirection","The direction of a linear gradient."],["Overflow","Determines whether content should be rendered outside of the bounding box of an element."],["PropType",""],["SelectorRelation",""],["Visibility","Visibility determines whether an entity will be rendered. An invisible entity will still be acted upon by the layout system. Use [Display] to hide an entity from both rendering and layout."]],"fn":[["apply_transform",""]],"struct":[["Abilities","Describes the capabilities of a view with respect to user interaction."],["Color","Describes a color."],["FocusOrder","Next and previous widgets which receive focus."],["GradientStop","A stop in a gradient, defined by a position and a color."],["LinearGradient","Describes a linear gradient."],["Opacity","The opacity of a view, between 0.0 and 1.0."],["PseudoClass","A bitflag of possible pseudoclasses."],["Rule","A rule is an id used to get/set shared style properties in State."],["Selector","A style selector."],["Style","Stores the style properties of all entities in the application. To set properties on entities see the [PropSet] trait."],["StyleParseError","Type which describes errors produced by the css style parser."],["Transform2D","A 2D transform matrix."]]});