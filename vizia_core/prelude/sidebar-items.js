initSidebarItems({"derive":[["Data",""],["Lens",""]],"enum":[["BorderCornerShape","The shape the default view drawing algorithm should use for handling borders with a given radius."],["Code","Code is the physical position of a key."],["CursorIcon","Describes the icon the mouse cursor should use."],["Display","Display determines whether an entity will be rendered and acted on by the layout system. To make an entity invisible to rendering but still visible to layout, see [Visibility]."],["GradientDirection","The direction of a linear gradient."],["Key","Key represents the meaning of a keypress."],["KeymapEvent","An event used to interact with a [`Keymap`] at runtime."],["LayoutType","The layout type determines how nodes will be positioned when directed by the parent"],["MouseButton","A mouse button."],["MouseButtonState","The state of a mouse button."],["Overflow","Determines whether content should be rendered outside of the bounding box of an element."],["PositionType","The position type determines whether a node will be positioned in-line with its siblings or seperate"],["Propagation","Determines how an event propagates through the tree."],["ProxyEmitError","Errors that might come up when emitting an event via a ContextProxy."],["Units","Units which describe spacing and size"],["Visibility","Visibility determines whether an entity will be rendered. An invisible entity will still be acted upon by the layout system. Use [Display] to hide an entity from both rendering and layout."],["WindowEvent","Events generated by the application in response to OS events as well as events that can be used to set properties of the window."]],"struct":[["Animation","An id used to reference style animations stored in context."],["AnimationBuilder","A builder for constructing animations."],["Binding","A binding view which rebuilds its contents when its observed data changes."],["Color","Describes a color."],["ContextProxy","A bundle of data representing a snapshot of the context when a thread was spawned."],["DrawContext","A restricted context used when drawing."],["Event","A wrapper around a message, providing metadata on how the event travels through the tree."],["EventContext",""],["GeometryChanged","Flags which determine if the geometry needs to be calculated before layout, and whether the geometry has changed after layout"],["GradientStop","A stop in a gradient, defined by a position and a color."],["KeyChord","A key chord used inside of a `Keymap`."],["Keymap","A keymap that associates key chords with actions."],["KeymapEntry","An entry inside of a `Keymap`."],["LanguageIdentifier","`LanguageIdentifier` is a core struct representing a Unicode Language Identifier."],["LinearGradient","Describes a linear gradient."],["Modifiers","The state of the modifier keys."],["Opacity","The opacity of a view, between 0.0 and 1.0."],["PseudoClass","A bitflag of possible pseudoclasses."],["Tree","The [Tree] describes the tree of entities."],["WindowDescription","Passed to the window to set initial window properties."],["WindowSize","The logical size of an application window."]],"trait":[["Actions","Methods to add an event handler to a view."],["AnimExt","Trait which provides methods for entities to manipulate linked animations"],["Data","A trait for any type which can be bound to, i.e. can be cached and compared against previous versions."],["Lens","A Lens allows the construction of a reference to a piece of some data, e.g. a field of a struct."],["LensExt","Helpers for constructing more complex `Lens`es."],["Message","The content of an event."],["Model","A trait implemented by application data in order to mutate in response to events."],["Res","A trait for types that can automatically resolve into other types, with or without consulting the Context."],["TreeExt","Trait which provides methods for querying the tree."],["WindowModifiers","Methods for building a window."]]});