window.SIDEBAR_ITEMS = {"enum":[["Align","Text horizontal alignment: `Left` (default), `Center`, `Right`."],["Baseline","Text baseline vertical alignment: `Top`, `Middle`, `Alphabetic` (default), `Bottom`."],["BlendFactor","Blend factors."],["CompositeOperation","Predefined composite oprations."],["ErrorKind","Enum with all possible canvas errors that could occur."],["FillRule","The fill rule used when filling paths: `EvenOdd`, `NonZero` (default)."],["ImageFilter","ImageFilter allows specifying the type of filter to apply to images with [`crate::Canvas::filter_image`]."],["ImageSource","Image source"],["LineCap","Determines the shape used to draw the end points of lines: `Butt` (default), `Round`, `Square`."],["LineJoin","Determines the shape used to join two line segments where they meet. `Miter` (default), `Round`, `Bevel`."],["PixelFormat","Image format: `Rgb8`, `Rgba8`, `Gray8`."],["RenderMode",""],["RenderTarget",""],["Solidity","Used to specify Solid/Hole when adding shapes to a path."]],"mod":[["img","Overview"],["imgref","In graphics code it’s very common to pass `width` and `height` along with a `Vec` of pixels, all as separate arguments. This is tedious, and can lead to errors."],["renderer","Module containing renderer implementations."],["rgb","Basic struct for `RGB` and `RGBA` pixels. Packed, with red first, alpha last."]],"struct":[["Atlas",""],["Canvas","Main 2D drawing context."],["Color","Struct for representing colors."],["CompositeOperationState","Determines how a new (“source”) data is displayed against an existing (“destination”) data."],["DrawCmd",""],["FontId","A font handle."],["FontMetrics","Information about a font."],["GlyphDrawCommands",""],["ImageFlags","Image flags (eg. repeat, flip, mipmaps, etc.)"],["ImageId","An image handle."],["ImageInfo","Information about an image."],["Paint","Struct controlling how graphical shapes are rendered."],["Path","A collection of verbs (`move_to()`, `line_to()`, `bezier_to()`, etc.) describing one or more contours."],["Quad",""],["TextContext","TextContext provides functionality for text processing in femtovg. You can add fonts using the [`Self::add_font_file()`], [`Self::add_font_mem()`] and [`Self::add_font_dir()`] functions. For each registered font a [`FontId`] is returned."],["TextMetrics","Result of a shaping run."],["Transform2D","2×3 matrix (2 rows, 3 columns) used for 2D linear transformations. It can represent transformations such as translation, rotation, or scaling."]],"trait":[["Renderer","This is the main renderer trait that the Canvas draws to."]]};